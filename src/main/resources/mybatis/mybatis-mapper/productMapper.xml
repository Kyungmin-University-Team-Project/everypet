<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.everypet.product.model.dao.ProductMapper">

    <!--    상품 등록   -->
    <insert id="insertProduct" parameterType="map">
        INSERT INTO TBL_PRODUCT(
            PRODUCT_ID, MEMBER_ID, PRODUCT_NAME, PRODUCT_IMG, PRODUCT_DESCRIPTION_IMG,
            PRODUCT_PRICE, PRODUCT_REGISTRATION_DATE, PRODUCT_CHANGED_DATE,
            PRODUCT_SALES_STATUS_YN, PRODUCT_DISCOUNT_RATE, NUMBER_OF_PRODUCT,
            PRODUCT_VIEWS, PRODUCT_MAIN_CATEGORY, PRODUCT_SUB_CATEGORY
        )
        VALUES (
                   #{productId}, #{memberId}, #{productName}, #{productImg}, #{productDescriptionImg},
                   #{productPrice}, NOW(), #{productChangedDate},
                   #{productSalesStatusYN}, #{productDiscountRate}, #{numberOfProduct},
                   0, #{productMainCategory}, #{productSubCategory}
               )
    </insert>

    <!--    상품 삭제   -->
    <delete id="deleteProductByProductId" parameterType="String">
        DELETE FROM TBL_PRODUCT
        WHERE PRODUCT_ID = #{productId}
    </delete>

    <!-- 상품 목록 조회 -->
    <select id="selectProductList" resultType="ProductListDTO" parameterType="map">
        SELECT
            p.PRODUCT_ID,
            p.MEMBER_ID,
            m.NAME AS name, -- 판매자 이름
            p.PRODUCT_NAME,
            p.PRODUCT_IMG,
            p.PRODUCT_DESCRIPTION_IMG,
            p.PRODUCT_PRICE,
            p.PRODUCT_DISCOUNT_RATE,
            p.PRODUCT_REGISTRATION_DATE,
            p.PRODUCT_VIEWS,
            p.PRODUCT_MAIN_CATEGORY,
            p.PRODUCT_SUB_CATEGORY,
            p.NUMBER_OF_PRODUCT,
            p.PRODUCT_SALES_STATUS_YN,
            -- 리뷰 평점 평균
            (SELECT IFNULL(AVG(r.PRODUCT_RATING), 0)
             FROM TBL_REVIEW r
             WHERE r.PRODUCT_ID = p.PRODUCT_ID) AS productRatingAvg,
            -- 리뷰 개수
            (SELECT COUNT(r.REVIEW_ID)
             FROM TBL_REVIEW r
             WHERE r.PRODUCT_ID = p.PRODUCT_ID) AS reviewCount,
            -- 상품 판매량 합계
            (SELECT IFNULL(SUM(od.QUANTITY), 0)
             FROM TBL_ORDER_DETAIL od
             WHERE od.PRODUCT_ID = p.PRODUCT_ID) AS salesCount
        FROM TBL_PRODUCT p
                 LEFT JOIN TBL_MEMBER m ON p.MEMBER_ID = m.MEMBER_ID -- 판매자 이름 조회를 위한 조인
        WHERE p.PRODUCT_SALES_STATUS_YN = 'Y'
          AND p.PRODUCT_MAIN_CATEGORY LIKE CONCAT('%', #{productMainCategory}, '%')
          AND p.PRODUCT_SUB_CATEGORY LIKE CONCAT('%', #{productSubCategory}, '%')
        ORDER BY ${orderBy}
            LIMIT #{pageStart}, #{pageSize}
    </select>

    <!-- 키워드 상품 검색 -->
    <select id="searchProductListByKeyword" resultType="ProductListDTO" parameterType="map">
        SELECT
            p.PRODUCT_ID,
            p.MEMBER_ID,
            m.NAME AS name, -- 판매자 이름
            p.PRODUCT_NAME,
            p.PRODUCT_IMG,
            p.PRODUCT_DESCRIPTION_IMG,
            p.PRODUCT_PRICE,
            p.PRODUCT_DISCOUNT_RATE,
            p.PRODUCT_REGISTRATION_DATE,
            p.PRODUCT_VIEWS,
            p.PRODUCT_MAIN_CATEGORY,
            p.PRODUCT_SUB_CATEGORY,
            p.NUMBER_OF_PRODUCT,
            p.PRODUCT_SALES_STATUS_YN,
            -- 리뷰 평점 평균 (서브쿼리로 계산)
            (SELECT IFNULL(AVG(r.PRODUCT_RATING), 0)
             FROM TBL_REVIEW r
             WHERE r.PRODUCT_ID = p.PRODUCT_ID) AS productRatingAvg,
            -- 리뷰 개수 (서브쿼리로 계산)
            (SELECT COUNT(r.REVIEW_ID)
             FROM TBL_REVIEW r
             WHERE r.PRODUCT_ID = p.PRODUCT_ID) AS reviewCount,
            -- 판매량 합계 (서브쿼리로 계산)
            (SELECT IFNULL(SUM(od.QUANTITY), 0)
             FROM TBL_ORDER_DETAIL od
             WHERE od.PRODUCT_ID = p.PRODUCT_ID) AS salesCount
        FROM TBL_PRODUCT p
                 LEFT JOIN TBL_MEMBER m ON p.MEMBER_ID = m.MEMBER_ID -- 판매자 이름 조회를 위한 조인
        WHERE (
            -- 상품명, 대분류, 소분류, 대분류 + 소분류, 키워드로 검색
                    p.PRODUCT_NAME LIKE CONCAT('%', #{keyword}, '%')
                OR p.PRODUCT_MAIN_CATEGORY LIKE CONCAT('%', #{keyword}, '%')
                OR p.PRODUCT_SUB_CATEGORY LIKE CONCAT('%', #{keyword}, '%')
                OR CONCAT(p.PRODUCT_MAIN_CATEGORY, ' ', p.PRODUCT_SUB_CATEGORY) LIKE CONCAT('%', #{keyword}, '%')
                -- 키워드 검색 테이블에 있는 상품 ID 검색
                OR p.PRODUCT_ID IN (
                SELECT PRODUCT_ID
                FROM TBL_PRODUCT_KEYWORDS
                WHERE KEYWORD LIKE CONCAT('%', #{keyword}, '%')
            )
                -- 판매자 이름으로 검색
                OR m.NAME LIKE CONCAT('%', #{keyword}, '%')
            )
          AND p.PRODUCT_SALES_STATUS_YN = 'Y'
        ORDER BY ${orderBy}
            LIMIT #{pageStart}, #{pageSize}
    </select>

    <!-- 특정 상품 조회 -->
    <select id="selectProductByProductId" resultType="ProductListDTO" parameterType="String">
        SELECT
            p.PRODUCT_ID,
            p.MEMBER_ID,
            m.NAME AS name, -- 판매자 이름
            p.PRODUCT_NAME,
            p.PRODUCT_IMG,
            p.PRODUCT_DESCRIPTION_IMG,
            p.PRODUCT_PRICE,
            p.PRODUCT_DISCOUNT_RATE,
            p.PRODUCT_REGISTRATION_DATE,
            p.PRODUCT_VIEWS,
            p.PRODUCT_MAIN_CATEGORY,
            p.PRODUCT_SUB_CATEGORY,
            p.NUMBER_OF_PRODUCT,
            p.PRODUCT_SALES_STATUS_YN,
            -- 리뷰 평점 평균
            (SELECT IFNULL(AVG(r.PRODUCT_RATING), 0)
             FROM TBL_REVIEW r
             WHERE r.PRODUCT_ID = p.PRODUCT_ID) AS productRatingAvg,
            -- 리뷰 개수
            (SELECT COUNT(r.REVIEW_ID)
             FROM TBL_REVIEW r
             WHERE r.PRODUCT_ID = p.PRODUCT_ID) AS reviewCount,
            -- 상품 판매량 합계
            (SELECT IFNULL(SUM(od.QUANTITY), 0)
             FROM TBL_ORDER_DETAIL od
             WHERE od.PRODUCT_ID = p.PRODUCT_ID) AS salesCount
        FROM TBL_PRODUCT p
                 LEFT JOIN TBL_MEMBER m ON p.MEMBER_ID = m.MEMBER_ID
        WHERE p.PRODUCT_ID = #{productId} -- 상품 ID로 조회
    </select>

    <!--    상품 상세 조회   -->
    <select id="selectProductListByBrand" resultType="ProductListDTO" parameterType="map">
        SELECT
            p.PRODUCT_ID,
            p.MEMBER_ID,
            m.NAME AS name, -- 판매자 이름
            p.PRODUCT_NAME,
            p.PRODUCT_IMG,
            p.PRODUCT_DESCRIPTION_IMG,
            p.PRODUCT_PRICE,
            p.PRODUCT_DISCOUNT_RATE,
            p.PRODUCT_REGISTRATION_DATE,
            p.PRODUCT_VIEWS,
            p.PRODUCT_MAIN_CATEGORY,
            p.PRODUCT_SUB_CATEGORY,
            p.NUMBER_OF_PRODUCT,
            p.PRODUCT_SALES_STATUS_YN,
            -- 리뷰 평점 평균
            (SELECT IFNULL(AVG(r.PRODUCT_RATING), 0)
             FROM TBL_REVIEW r
             WHERE r.PRODUCT_ID = p.PRODUCT_ID) AS productRatingAvg,
            -- 리뷰 개수
            (SELECT COUNT(r.REVIEW_ID)
             FROM TBL_REVIEW r
             WHERE r.PRODUCT_ID = p.PRODUCT_ID) AS reviewCount,
            -- 상품 판매량 합계
            (SELECT IFNULL(SUM(od.QUANTITY), 0)
             FROM TBL_ORDER_DETAIL od
             WHERE od.PRODUCT_ID = p.PRODUCT_ID) AS salesCount
        FROM TBL_PRODUCT p
                 LEFT JOIN TBL_MEMBER m ON p.MEMBER_ID = m.MEMBER_ID -- 판매자 이름 조회를 위한 조인
        WHERE p.PRODUCT_SALES_STATUS_YN = 'Y'
          AND m.NAME = #{brand}  -- 브랜드 이름 필터 추가
        ORDER BY ${orderBy}
            LIMIT #{pageStart}, #{pageSize}
    </select>



    <!--    상품 관리자 검색(권한 검색)   -->
    <select id="selectMemberIdByProductId" resultType="String">
        SELECT MEMBER_ID FROM TBL_PRODUCT
        WHERE PRODUCT_ID = #{productId}
    </select>

    <!-- 상품 수정 -->
    <update id="updateProduct" parameterType="map">
        UPDATE TBL_PRODUCT
        SET
            PRODUCT_NAME = #{productName},
            PRODUCT_PRICE = #{productPrice},
            PRODUCT_CHANGED_DATE = #{productChangedDate},
            PRODUCT_SALES_STATUS_YN = #{productSalesStatusYN},
            PRODUCT_DISCOUNT_RATE = #{productDiscountRate},
            NUMBER_OF_PRODUCT = #{numberOfProduct},
            PRODUCT_MAIN_CATEGORY = #{productMainCategory},
            PRODUCT_SUB_CATEGORY = #{productSubCategory},
            PRODUCT_CHANGED_DATE = #{productChangedDate}
        WHERE PRODUCT_ID = #{productId}
    </update>

    <!--    상품 조회수 증가   -->
    <update id="incrementProductViews" parameterType="String">
        UPDATE TBL_PRODUCT
        SET PRODUCT_VIEWS = PRODUCT_VIEWS + 1
        WHERE PRODUCT_ID = #{productId}
    </update>

    <!-- 자동 완성 검색 -->
    <select id="autocompleteKeyword" resultType="String" parameterType="String">
        SELECT keyword FROM (
            (SELECT KEYWORD AS keyword
            FROM TBL_PRODUCT_KEYWORDS
            WHERE KEYWORD LIKE CONCAT('%', #{keyword}, '%')
            LIMIT 10)

            UNION

            (SELECT PRODUCT_CATEGORY AS keyword
            FROM TBL_PRODUCT
            WHERE PRODUCT_CATEGORY LIKE CONCAT('%', #{keyword}, '%')
            AND PRODUCT_SALES_STATUS_YN = 'Y'
            LIMIT 10)

            UNION

            (SELECT NAME AS keyword
             FROM TBL_MEMBER
             WHERE NAME LIKE CONCAT('%', #{keyword}, '%')
             LIMIT 10)
        ) AS keywords
    </select>

    <!--    상품 키워드 등록   -->
    <insert id="insertProductKeyword" parameterType="Map">
        INSERT INTO TBL_PRODUCT_KEYWORDS(PRODUCT_ID, KEYWORD)
        VALUES (#{productId}, #{keyword})
    </insert>

    <!--    상품 키워드 삭제   -->
    <delete id="deleteProductKeyword" parameterType="Map">
        DELETE FROM TBL_PRODUCT_KEYWORDS
        WHERE PRODUCT_ID = #{productId}
        AND KEYWORD_ID = #{keywordId}
    </delete>

    <!-- 상품 현재 가격 조회 (할인율 적용) -->
    <select id="selectDiscountedProductPriceByProductId" resultType="int">
        SELECT PRODUCT_PRICE * (1 - (PRODUCT_DISCOUNT_RATE / 100)) AS DISCOUNTED_PRICE
        FROM TBL_PRODUCT
        WHERE PRODUCT_SALES_STATUS_YN = 'Y'
          AND PRODUCT_ID = #{productId}
    </select>

</mapper>